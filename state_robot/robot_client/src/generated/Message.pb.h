// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_INCLUDED_Message_2eproto
#define PROTOBUF_INCLUDED_Message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Message_2eproto 

namespace protobuf_Message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Message_2eproto
namespace small_world {
class SM_Event;
class SM_EventDefaultTypeInternal;
extern SM_EventDefaultTypeInternal _SM_Event_default_instance_;
}  // namespace small_world
namespace google {
namespace protobuf {
template<> ::small_world::SM_Event* Arena::CreateMaybeMessage<::small_world::SM_Event>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace small_world {

// ===================================================================

class SM_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:small_world.SM_Event) */ {
 public:
  SM_Event();
  virtual ~SM_Event();

  SM_Event(const SM_Event& from);

  inline SM_Event& operator=(const SM_Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SM_Event(SM_Event&& from) noexcept
    : SM_Event() {
    *this = ::std::move(from);
  }

  inline SM_Event& operator=(SM_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SM_Event* internal_default_instance() {
    return reinterpret_cast<const SM_Event*>(
               &_SM_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SM_Event* other);
  friend void swap(SM_Event& a, SM_Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SM_Event* New() const final {
    return CreateMaybeMessage<SM_Event>(NULL);
  }

  SM_Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SM_Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SM_Event& from);
  void MergeFrom(const SM_Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SM_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // required uint64 event_time = 2;
  bool has_event_time() const;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 2;
  ::google::protobuf::uint64 event_time() const;
  void set_event_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:small_world.SM_Event)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_event_time();
  void clear_has_event_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::google::protobuf::uint64 event_time_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SM_Event

// required string event_type = 1;
inline bool SM_Event::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Event::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Event::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Event::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_type();
}
inline const ::std::string& SM_Event::event_type() const {
  // @@protoc_insertion_point(field_get:small_world.SM_Event.event_type)
  return event_type_.GetNoArena();
}
inline void SM_Event::set_event_type(const ::std::string& value) {
  set_has_event_type();
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:small_world.SM_Event.event_type)
}
#if LANG_CXX11
inline void SM_Event::set_event_type(::std::string&& value) {
  set_has_event_type();
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:small_world.SM_Event.event_type)
}
#endif
inline void SM_Event::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_type();
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:small_world.SM_Event.event_type)
}
inline void SM_Event::set_event_type(const char* value, size_t size) {
  set_has_event_type();
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:small_world.SM_Event.event_type)
}
inline ::std::string* SM_Event::mutable_event_type() {
  set_has_event_type();
  // @@protoc_insertion_point(field_mutable:small_world.SM_Event.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SM_Event::release_event_type() {
  // @@protoc_insertion_point(field_release:small_world.SM_Event.event_type)
  if (!has_event_type()) {
    return NULL;
  }
  clear_has_event_type();
  return event_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SM_Event::set_allocated_event_type(::std::string* event_type) {
  if (event_type != NULL) {
    set_has_event_type();
  } else {
    clear_has_event_type();
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:small_world.SM_Event.event_type)
}

// required uint64 event_time = 2;
inline bool SM_Event::has_event_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Event::set_has_event_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Event::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Event::clear_event_time() {
  event_time_ = GOOGLE_ULONGLONG(0);
  clear_has_event_time();
}
inline ::google::protobuf::uint64 SM_Event::event_time() const {
  // @@protoc_insertion_point(field_get:small_world.SM_Event.event_time)
  return event_time_;
}
inline void SM_Event::set_event_time(::google::protobuf::uint64 value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:small_world.SM_Event.event_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace small_world

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Message_2eproto
